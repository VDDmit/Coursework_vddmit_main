document.addEventListener("DOMContentLoaded", async function () {
    try {
        await loadUser();
        await updateUserLevelInfo();
        await loadTasks();
        initializeSearch(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        logout();
    }
});

async function updateUserLevelInfo() {
    try {
        const response = await fetchWithAuth("/api/users/me");
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);
        const user = await response.json();

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        document.getElementById("levelText").textContent = `–£—Ä–æ–≤–µ–Ω—å: ${user.lvl}`;
        document.getElementById("xpText").textContent = `XP: ${user.xp}`;
        document.getElementById("nextLevelText").textContent = `–î–æ —Å–ª–µ–¥. —É—Ä–æ–≤–Ω—è: ${user.lvl * 1000 - user.xp} XP`;

    } catch (error) {
        console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:", error);
    }
}


// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
let tasks = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
async function loadTasks() {
    try {
        const response = await fetchWithAuth("/api/tasks/list");
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);
        tasks = await response.json();
        renderTasks(tasks);
    } catch (error) {
        console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á
function sortTasks(type) {
    if (type === "done") {
        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks.sort((a, b) => (b.status === "DONE") - (a.status === "DONE"));
    } else if (type === "inProgress") {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        tasks.sort((a, b) => (b.status === "IN_PROGRESS") - (a.status === "IN_PROGRESS"));
    } else if (type === "inReview") {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
        tasks.sort((a, b) => (b.status === "IN_REVIEW") - (a.status === "IN_REVIEW"));
    } else if (type === "todo") {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ TODO
        tasks.sort((a, b) => (b.status === "TODO") - (a.status === "TODO"));
    }
    renderTasks(tasks);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
function initializeSearch() {
    const searchInput = document.getElementById("searchInput");
    searchInput.addEventListener("input", function () {
        const query = this.value.trim().toLowerCase();
        const filteredTasks = tasks.filter(task => {
            const titleMatch = task.title.toLowerCase().includes(query);
            const descriptionMatch = task.description && task.description.toLowerCase().includes(query);
            return titleMatch || descriptionMatch;
        });
        renderTasks(filteredTasks);
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
function getStatusBadge(status) {
    switch (status) {
        case "TODO":
            return '<span class="badge bg-secondary px-2 py-1">üìå TODO</span>';
        case "IN_PROGRESS":
            return '<span class="badge bg-warning text-dark px-2 py-1">‚è≥ –í —Ä–∞–±–æ—Ç–µ</span>';
        case "IN_REVIEW":
            return '<span class="badge bg-info text-dark px-2 py-1">üßê –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</span>';
        case "DONE":
            return '<span class="badge bg-success px-2 py-1">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞</span>';
        default:
            return '<span class="badge bg-light text-dark px-2 py-1">‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</span>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
function renderTasks(tasksArray) {
    const taskContainer = document.getElementById("taskList");
    taskContainer.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

    if (!tasksArray.length) {
        taskContainer.innerHTML = `<p class="text-secondary text-dark">–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.</p>`;
        return;
    }

    tasksArray.forEach(task => {
        const taskItem = document.createElement("a");
        taskItem.href = `/tasks/${task.id}`;
        taskItem.classList.add(
            "list-group-item",
            "list-group-item-action",
            "bg-dark",
            "text-light",
            "d-flex",
            "flex-column",
            "hover-effect"
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        const statusBadge = getStatusBadge(task.status);

        // –û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        const description = task.description && task.description.length > 50
            ? task.description.slice(0, 50) + "..."
            : (task.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è");

        // –í—ã–≤–æ–¥ XP, –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null
        const xp = task.xp !== null ? `üéñÔ∏è XP: ${task.xp}` : "üéñÔ∏è XP: 0";
        const projectTitle = task.project && task.project.name
            ? `üìå –ü—Ä–æ–µ–∫—Ç: ${task.project.name}`
            : "üìå –ü—Ä–æ–µ–∫—Ç: –ù–µ —É–∫–∞–∑–∞–Ω";
        const assignedUser = task.assignedUser && task.assignedUser.username
            ? `üë§ ${task.assignedUser.username}`
            : "üë§ –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω";

        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∑–∞–¥–∞—á–∏
        taskItem.innerHTML = `
            <div class="d-flex justify-content-between w-100">
                <h5 class="mb-1">${task.title}</h5>
                <small>${statusBadge}</small>
            </div>
            <p class="mb-1 small text-secondary">${description}</p>
            <div class="d-flex justify-content-between text-muted small">
                <span class="text-light">${xp}</span>
                <span class="text-light">${projectTitle}</span>
                <span class="text-light">${assignedUser}</span>
            </div>
        `;
        taskContainer.appendChild(taskItem);
    });
}


// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
let rankingChart = null;

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
async function loadRankingChart() {
    try {
        const response = await fetchWithAuth("/api/users/me_in_top_list");
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);

        const topUsers = await response.json();

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        const labels = topUsers.map(user => user.user.username);
        const xpData = topUsers.map(user => user.user.xp);
        const ranks = topUsers.map(user => `#${user.rank}`);

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
        renderRankingChart(labels, xpData, ranks);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
function renderRankingChart(labels, xpData, ranks) {
    const ctx = document.getElementById("rankingChart").getContext("2d");

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (rankingChart instanceof Chart) {
        rankingChart.destroy();
    }

    rankingChart = new Chart(ctx, {
        type: "bar",
        data: {
            labels: labels,
            datasets: [{
                label: "XP",
                data: xpData,
                backgroundColor: labels.map(name =>
                    name === document.getElementById("username").textContent ? "#ffcc00" : "#007bff"
                ),
                borderColor: "#fff",
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    ticks: {
                        color: "black" // –¶–≤–µ—Ç —á–∏—Å–µ–ª –Ω–∞ –æ—Å–∏ X
                    }
                },
                y: {
                    ticks: {
                        color: "black" // –¶–≤–µ—Ç —á–∏—Å–µ–ª –Ω–∞ –æ—Å–∏ Y
                    },
                    beginAtZero: true
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: "black" // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ª–µ–≥–µ–Ω–¥—ã
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            return `${ranks[context.dataIndex]} - ${context.raw} XP`;
                        }
                    }
                }
            }
        }
    });
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", loadRankingChart);