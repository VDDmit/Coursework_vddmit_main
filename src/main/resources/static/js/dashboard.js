document.addEventListener("DOMContentLoaded", async function () {
    try {
        await loadUser();
        await updateUserLevelInfo();
        await loadTasks();
        initializeSearch(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        logout();
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–º—è)
async function loadUser() {
    try {
        const response = await fetchWithAuth("/api/users/me");
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);
        const user = await response.json();
        document.getElementById("username").textContent = user.username;
    } catch (error) {
        console.warn("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        logout();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ –∏ XP
async function updateUserLevelInfo() {
    try {
        const response = await fetchWithAuth("/api/users/level-up", { method: "POST" });
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);
        const user = await response.json();
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —É—Ä–æ–≤–Ω–µ
        document.getElementById("levelInfo").innerHTML =
            `–£—Ä–æ–≤–µ–Ω—å: ${user.lvl} | XP: ${user.xp} | –î–æ —Å–ª–µ–¥. —É—Ä–æ–≤–Ω—è: ${user.lvl * 1000 - user.xp} XP`;
    } catch (error) {
        console.warn("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:", error);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
let tasks = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
async function loadTasks() {
    try {
        const response = await fetchWithAuth("/api/tasks/list");
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);
        tasks = await response.json();
        renderTasks(tasks);
    } catch (error) {
        console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á
function sortTasks(type) {
    if (type === "completed") {
        // –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks.sort((a, b) => b.completed - a.completed);
    } else if (type === "incomplete") {
        // –°–Ω–∞—á–∞–ª–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks.sort((a, b) => a.completed - b.completed);
    }
    renderTasks(tasks);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
function initializeSearch() {
    const searchInput = document.getElementById("searchInput");
    searchInput.addEventListener("input", function () {
        const query = this.value.trim().toLowerCase();
        const filteredTasks = tasks.filter(task => {
            const titleMatch = task.title.toLowerCase().includes(query);
            const descriptionMatch = task.description && task.description.toLowerCase().includes(query);
            return titleMatch || descriptionMatch;
        });
        renderTasks(filteredTasks);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
function renderTasks(tasksArray) {
    const taskContainer = document.getElementById("taskList");
    taskContainer.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

    if (!tasksArray.length) {
        taskContainer.innerHTML = `<p class="text-secondary">–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.</p>`;
        return;
    }

    tasksArray.forEach(task => {
        const taskItem = document.createElement("a");
        taskItem.href = `/tasks/${task.id}`;
        taskItem.classList.add(
            "list-group-item",
            "list-group-item-action",
            "bg-dark",
            "text-light",
            "d-flex",
            "flex-column",
            "hover-effect"
        );

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        const status = task.completed
            ? '<span class="text-success">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞</span>'
            : '<span class="text-danger">‚ùå –í —Ä–∞–±–æ—Ç–µ</span>';

        // –û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        const description = task.description && task.description.length > 50
            ? task.description.slice(0, 50) + "..."
            : (task.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è");

        // –í—ã–≤–æ–¥ XP, –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null
        const xp = task.xp !== null ? `üéñÔ∏è XP: ${task.xp}` : "üéñÔ∏è XP: 0";
        const projectTitle = task.project && task.project.name
            ? `üìå –ü—Ä–æ–µ–∫—Ç: ${task.project.name}`
            : "üìå –ü—Ä–æ–µ–∫—Ç: –ù–µ —É–∫–∞–∑–∞–Ω";
        const assignedUser = task.assignedUser && task.assignedUser.username
            ? `üë§ ${task.assignedUser.username}`
            : "üë§ –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω";

        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –∑–∞–¥–∞—á–∏
        taskItem.innerHTML = `
            <div class="d-flex justify-content-between w-100">
                <h5 class="mb-1">${task.title}</h5>
                <small>${status}</small>
            </div>
            <p class="mb-1 small text-secondary">${description}</p>
            <div class="d-flex justify-content-between text-muted small">
                <span class="text-light">${xp}</span>
                <span class="text-light">${projectTitle}</span>
                <span class="text-light">${assignedUser}</span>
            </div>
        `;
        taskContainer.appendChild(taskItem);
    });
}
